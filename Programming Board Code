{"slots":{"0":{"name":"Screen","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"if mode == \"Fly\" and nitrocount > 0 then\n    ball.yd = ball.yd+3\n    ball.xd = ball.xd+3\n    nitrocount = nitrocount - 1\nend\n\nif mode == \"Launch\" then\n    mode = \"Fly\" \n    local xc = (Screen.getMouseX() * 100 - 50) --get X and Y coordinates relative to the center of the screen\n    local yc = (50 - Screen.getMouseY() * 100) \n    xc, yc = xc / math.sqrt(xc*xc+yc*yc) * (3 + player.launchmod * 5), yc / math.sqrt(xc*xc+yc*yc) * (3 + player.launchmod * 5) --Limit X and Y coordinates based on launch power\n    ball.xd = -xc --Set X and Y deltas, the movement of the ball\n    ball.yd = -yc\n    nitrocount = player.nitro\n    ground = ground1\nelseif mode == \"Title\" then --If clicking on the title screen, reset the ball position and movement to set up for launch\n    mode = \"Launch\"\n    ball.x = 0\n    ball.y = 50\n    ball.yd = -1\n    ball.xd = 1\nend\n\nif mode == \"Scoreboard\" then\n       mode = \"Launch\"\n       ball.x = 0\n       ball.y = 50\n       ball.yd = -1\n       ball.xd = 1 \nend\n\nif mode == \"Upgrade\" then\n    if x > 0.4 and x < 0.5 and y > 0.2 and y < 0.26 and player.credits >= player.bouncemod then player.credits = player.credits - player.bouncemod player.bouncemod = player.bouncemod + 1 end\n    if x > 0.4 and x < 0.5 and y > 0.3 and y < 0.36 and player.credits >= player.frictionmod*2 then player.credits = player.credits - player.frictionmod*2 player.frictionmod = player.frictionmod + 1 end\n    if x > 0.4 and x < 0.5 and y > 0.4 and y < 0.46 and player.credits >= player.gravitymod*5 then player.credits = player.credits - player.gravitymod*5 player.gravitymod = player.gravitymod + 1 end\n    if x > 0.4 and x < 0.5 and y > 0.5 and y < 0.56 and player.credits >= (player.launchmod+2)*(player.launchmod+2) then player.credits = player.credits - (player.launchmod+2)*(player.launchmod+2) player.launchmod = player.launchmod + 1 end\n    if x > 0.4 and x < 0.5 and y > 0.6 and y < 0.66 and player.credits >= (player.nitro+2)*(player.nitro+2)*(player.nitro+2) then player.credits = player.credits - (player.nitro+2)*(player.nitro+2)*(player.nitro+2) player.nitro = player.nitro + 1 end\n    if x > 0.35 and x < 0.65 and y > 0.8 and y < 0.9 then --Continue button\n       mode = \"Launch\"\n       ball.x = 0\n       ball.y = 50\n       ball.yd = -1\n       ball.xd = 1\n    end\n    if x > 0.75 and x < 0.95 and y > 0.8 and y < 0.9 then --Scores button\n        mode = \"Scoreboard\"\n    end\n    PlayerUpdate()\nend","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"0"},"key":"0"},{"code":"for k,v in pairs(unit) do --Find databank slot\n    if type(v) == \"table\" and v.getElementClass then\n        if v.getElementClass() == \"DataBankUnit\" then databank = v end\n    end\nend\n\nScreen.activate()\nmode = \"Title\"\nunit.setTimer(\"Game\", 0.01)\nball = {}\nball.x = 0\nground1 = {0, 105, 0, 15, 215, 50}\nground2 = {150, 75, 0, 200, 100, 0}\nground3 = {125, 125, 125, 200, 200, 200}\nground4 = {200, 0, 0, 255, 0, 0}\nground5 = {50, 5, 50, 105, 55, 105}\n\nplayer = {}\nplayername = system.getPlayerName(unit.getMasterPlayerId()) --Check name of player running the script\nif databank.hasKey(playername) == 1 then --If databank has player data, use it\n    player = json.decode(databank.getStringValue(playername))\nelse --If no player data in databank, assign default values\n    player.frictionmod = 1\n    player.launchmod = 1\n    player.gravitymod = 1\n    player.bouncemod = 1\n    player.credits = 0\n    player.nitro = 0\nend\n\ncloud = {}\nfor i = 1, 7, 2 do\n    cloud[i] = math.random()*100 + 100\n    cloud[i+1] = math.random()*60\nend\n\n\nTopNames = {}\nTopScores = {}\n\nfor i = 1, 10 do --Get the top 10 scores and their names from the databank\n    TopNames[i] = databank.hasKey(i) == 1 and databank.getStringValue(i) or nil\n    TopScores[i] = databank.hasKey(i+10) == 1 and databank.getIntValue(i+10) or nil\nend\n\nfunction ScoresUpdate() --Update databank with top 10 scores\n    local playername = tostring(system.getPlayerName(unit.getMasterPlayerId()))\n    local skip = false\n    for i = 1, #TopNames do\n        if TopNames[i] == playername then --Check to see if player's top distance is already in the top 10 scores\n            if ball.x > TopScores[i] then --If player's most recent distance is greater than the existing record\n                TopScores[i] = ball.x --Replacing existing top distance with new distance\n            end\n            skip = true --Just a flag to skip adding the player to the top 10 list\n        end\n    end\n    \n if not skip then --if player's name was not already in the top scores\n    TopScores[#TopScores+1] = ball.x --Add player's score to the end of the list\n    TopNames[#TopNames+1] = playername --Add player's name to the end of the list\n end\n    \n for i = #TopScores, 2, -1 do --Sort the top 10 scores\n  if TopScores[i-1] == nil or TopScores[i] > TopScores[i-1] then\n        TopScores[i], TopScores[i-1]  = TopScores[i-1], TopScores[i]\n        TopNames[i], TopNames[i-1] = TopNames[i-1], TopNames[i]\n  end\n end\n TopScores[11] = nil --delete 11th score, if it exists\n TopNames[11] = nil\n   for i = 1, #TopScores do --update databank with top 10 scores\n      databank.setStringValue(i,TopNames[i])\n      databank.setIntValue(i+10, math.floor(TopScores[i]))\n   end\nend\n\nfunction PlayerUpdate() --Update databank with player's credits and mods\n      databank.setStringValue(system.getPlayerName(unit.getMasterPlayerId()),json.encode(player))\nend","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"1"},{"code":"if mode == \"Title\" then\nhtml = [[<html height:100%;width:100% style=\"background-image: linear-gradient(rgb(0,0,155) 0%, rgb(50,200,255) 90%, rgb(0, 105, 0) 90%, rgb(15, 215, 50) 100%);\">\n  <div style=\"height:100%;width:100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n  font-family: sans-serif;\">    \n    <text style=\"font-size:28vh; color:white; stroke:1vh; font-style:italic;text-shadow: -0.6vw 0.6vh 0 rgb(50,100,150);position:absolute;top:20%;\">Bounce 2!</text>\n</div></html>]]  \nend\n\nif mode == \"Launch\" then\n    local xc = (Screen.getMouseX() * 100 - 50)\n    local yc = (50 - Screen.getMouseY() * 100)\n    xc, yc = xc / math.sqrt(xc*xc+yc*yc) * player.launchmod * 3, yc / math.sqrt(xc*xc+yc*yc) * player.launchmod * 3\n    html = [[<svg height=100% width=100% style=\"background-image: linear-gradient(rgb(0,0,155) 0%, rgb(50,200,255) 90%, rgb(0, 105, 0) 90%, rgb(15, 215, 50) 100%);\">\n    <line x1=]].. xc+50 ..[[% y1=]].. -yc+50 ..[[% x2=50% y2=50% style=\"stroke:rgb(0,0,0);stroke-width:0.2vh;\" />\n    <circle cx=50vw cy=50vh r=2vh stroke=\"black\" stroke-width=1 fill=rgb(]].. 255-player.bouncemod*3 ..[[,255,]].. 255-player.bouncemod*10 ..[[) />\n    </svg>]]\nend\n\nif mode == \"Fly\" then\n    ball.yd = ball.yd - (-0.14/(1+2^(-0.25*player.gravitymod))+0.17) --Adjust ball's speed based on gravity\n    ball.y = ball.y - ball.yd --Move the ball's position based on it's speed\n    ball.x = ball.x + ball.xd\n    if ball.y > 93 then --If ball hits the ground\n        ball.y = 93 - (ball.y - 93) --Move the ball up instead of down\n        ball.yd = -ball.yd * (2.8/(1+2^(-0.05*player.bouncemod))-.9) --Change the direction the ball is moving and reduce vertical speed\n        ball.xd = ball.xd* (2.8/(1+2^(-0.05*player.bouncemod))-.9) --Slow the horizontal speed based on friction mods\n        if ball.x > 500000 then ball.yd = ball.yd*0.25 ball.xd = ball.xd*0.25 ground = ground5 --Penalties for higher difficulty zones\n        elseif ball.x > 100000 then ball.yd = ball.yd*0.5 ball.xd = ball.xd*0.5 ground = ground4\n        elseif ball.x > 25000 then ball.yd = ball.yd*0.75 ball.xd = ball.xd*0.75 ground = ground3\n        elseif ball.x > 5000 then ball.yd = ball.yd*0.9 ball.xd = ball.xd*0.9 ground = ground2\n        else ground = ground1\n        end\n        if ball.xd < 0.2 or ball.yd < 0.2 then mode = \"Upgrade\" player.credits = player.credits + math.floor(ball.x/500) PlayerUpdate() ScoresUpdate() end --return to title if it's not bouncing high enough\n    end\n    \n    if ball.y < 50 then height = 50-ball.y else height = 0 end --We don't want the ball to go up off the screen, so we create height variable to correlate with ball.y but never reach 100.\n    html = [[<svg height=100% width=100% style=\"background-image: linear-gradient(rgb(0,0,155) 0%, rgb(50,200,255) ]].. 90+height ..[[%, rgb(]].. ground[1] ..[[,]].. ground[2] ..[[,]].. ground[3] ..[[) ]].. 90+height ..[[%, rgb(]].. ground[4] ..[[,]].. ground[5] ..[[,]].. ground[6] ..[[) ]].. 100+height ..[[%);\">]] --set background\n    if ball.y > 50 then --add shadow\n        html = html.. [[<ellipse cx=50% cy=95% rx=]].. 1.8/((93-ball.y)/10+1) ..[[vh ry=]].. 0.9/((93-ball.y)/10+1) ..[[vh style=\"fill:black;opacity:]].. 0.5/((93-ball.y)/10+1) ..[[;\" />]]\n    end\n    \n    for i = 1, 7, 2 do\n    if cloud[i] < -20 then cloud[i] = 100+math.random()*50 --if a cloud is too far left, wrap it back to the right\n            if height > 50 then cloud[i+1] = math.random()*100-height-ball.yd*2 --If high in the air, spread the new clouds out more vertically\n            else cloud[i+1] = math.random()*60-height --If near the ground, then only put clouds in the upper part of the screen\n            end \n        else cloud[i] = cloud[i] - ball.xd\n        html = html..[[<rect rx=20 ry=20 x=]].. cloud[i] ..[[vw y=]].. cloud[i+1]+height ..[[vh fill=white stroke=1vh height=10% width=20% opacity=0.75 />]] --draw the clouds\n    end\n    end\n    \n    if ball.y >= 50 then height = ball.y else height = -100/(1+2^(-0.001*(50-ball.y)))+100 end --set height variable for the ball position\n    html = html..[[\n    \n    <circle cx=]].. 50-ball.xd/40 ..[[vw cy=]].. height+ball.yd/10 ..[[vh r=2vh fill=rgb(]].. 255-player.bouncemod*3 ..[[,255,]].. 255-player.bouncemod*10 ..[[) opacity=0.15 />\n    <circle cx=50vw cy=]].. height ..[[vh r=2vh stroke=\"black\" stroke-width=1 fill=rgb(]].. 255-player.bouncemod*3 ..[[,255,]].. 255-player.bouncemod*10 ..[[) />\n    <text x=90% y=10% fill=\"Black\" font-size=8vh font-family=cursive text-anchor=\"end\">]].. math.floor(ball.x/500) ..[[¤</text>\n    <text x=5% y=10% fill=\"Black\" font-size=8vh font-family=cursive>Altitude: ]].. math.floor(9.3-ball.y/10) ..[[m</text>\n    <text x=5% y=20% fill=\"Black\" font-size=8vh font-family=cursive>Distance: ]].. math.floor(ball.x) ..[[m</text>]]\n    if nitrocount > 0 then\n        html = html..[[<text x=5% y=30% fill=\"Red\" font-size=8vh font-family=cursive>]]\n        for n = 1, nitrocount do html = html..[[N]] end\n        html = html..[[</text>]]\n    end\n    html = html..[[</svg>]]\nend\n\nif mode == \"Upgrade\" then\n    html = [[<html height:100%;width:100% style=\"background-image: radial-gradient(rgb(150,150,160), rgb(100,110,100), rgb(50,60,50));\">\n  <div style=\"border:0.5vw gray outset;height:100%; width:100%;\">\n    <div style=\"font-size:12vh; color:white; font-family: sans-serif; text-align: center; height:20%;\">Upgrades - ]].. player.credits ..[[¤</div>\n      <div style=\"justify-content: center; align-items: center; align-content: center;\">\n    <div style=\"position:absolute;top:20%;left:40%;font-size:5vh; color:black; font-family: sans-serif; text-align: left; border:0.3vw gray outset; width:10%;\">]].. player.bouncemod ..[[¤</div>\n    <div style=\"position:absolute;top:20%;left:50%;font-size:5vh; color:black; font-family: sans-serif; text-align: left;\">Bouncy level ]].. player.bouncemod ..[[</div>\n    <div style=\"position:absolute;top:30%;left:40%;font-size:5vh; color:black; font-family: sans-serif; text-align: left; border:0.3vw gray outset; width:10%;\">]].. player.frictionmod*2 ..[[¤</div>\n    <div style=\"position:absolute;top:30%;left:50%;font-size:5vh; color:black; font-family: sans-serif; text-align: left;\">Friction level ]].. player.frictionmod ..[[</div>\n    <div style=\"position:absolute;top:40%;left:40%;font-size:5vh; color:black; font-family: sans-serif; text-align: left; border:0.3vw gray outset; width:10%;\">]].. player.gravitymod*5 ..[[¤</div>\n    <div style=\"position:absolute;top:40%;left:50%;font-size:5vh; color:black; font-family: sans-serif; text-align: left;\">Gravity level ]].. player.gravitymod ..[[</div>\n    <div style=\"position:absolute;top:50%;left:40%;font-size:5vh; color:black; font-family: sans-serif; text-align: left; border:0.3vw gray outset; width:10%;\">]].. (player.launchmod+2)*(player.launchmod+2) ..[[¤</div>\n    <div style=\"position:absolute;top:50%;left:50%;font-size:5vh; color:black; font-family: sans-serif; text-align: left;\">Launch level ]].. player.launchmod ..[[</div>\n    <div style=\"position:absolute;top:60%;left:40%;font-size:5vh; color:black; font-family: sans-serif; text-align: left; border:0.3vw gray outset; width:10%;\">]].. (player.nitro+2)*(player.nitro+2)*(player.nitro+2) ..[[¤</div>\n    <div style=\"position:absolute;top:60%;left:50%;font-size:5vh; color:black; font-family: sans-serif; text-align: left;\">Nitro level ]].. player.nitro ..[[</div>\n    <div style=\"position:absolute;top:80%;left:35%;font-size:8vh; color:black; font-family: sans-serif; text-align: center; border:0.4vw gray outset; width:30%;\">Continue</div>\n    <div style=\"position:absolute;top:80%;left:75%;font-size:8vh; color:black; font-family: sans-serif; text-align: center; border:0.4vw gray outset; width:20%;\">Scores</div>\n      </div>\n  </div>\n</html>]]\nend\n\nif mode == \"Scoreboard\" then --Scoreboard\n    html = [[<html height=100% width=100% style=\"background-image: radial-gradient(rgb(55,0,155) 0%, rgb(15,0,75) 110%);\">\n    <div style=\"display: grid; grid-template-columns: auto auto auto; justify-content:left; grid-column-gap: 3vw; grid-row-gap: 2vh;\n            font-size:5vh;color:black;align:bottom;margin-top:10vh;margin-left:15vw;\">]]\n    for i = 1, #TopNames do\n       html = html..[[<div>#]].. i ..[[:</div><div>]].. TopNames[i] ..[[</div><div>]].. math.floor(TopScores[i]) ..[[m</div>]] \n    end\n    html = html..[[</div></html>]] --Webcode sent to screen to display scoreboard \nend","filter":{"args":[{"value":"Game"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"html = [[<html height:100%;width:100% style=\"background-image: linear-gradient(rgb(0,0,155) 0%, rgb(50,200,255) 90%, rgb(0, 105, 0) 90%, rgb(15, 215, 50) 100%);opacity:.65;\">\n  <div style=\"\n  height:100%;\n  width:100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n  font-family: sans-serif;\">\n<text style=\"font-size:28vh; color:white; stroke:1vh; font-style:italic;text-shadow: -0.6vw 0.6vh 0 rgb(50,100,150);position:absolute;top:20%;\">Bounce 2!</text>\n<text style=\"font-size:3vh; color:black;position:absolute;bottom:3%;\">Activate programming board to start</text>\n</div>\n<div style=\"\nposition:absolute;\ndisplay: grid;\ngrid-template-columns: auto auto auto;\njustify-content:left;\ngrid-column-gap: 3vw;\ngrid-row-gap: 2vh;\nfont-size:5vh;\ncolor:black;\nalign:bottom;\ntop:55%;\nleft:30%\">]]\n for i = 1, #TopNames > 3 and 3 or #TopNames do\n  html = html..[[<div>#]].. i ..[[:</div><div>]].. TopNames[i] ..[[</div><div>]].. math.floor(TopScores[i]) ..[[m</div>]] \n end\nhtml = html..[[</div></html>]]\n\nScreen.setHTML(html)","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"3"},{"code":"Screen.setHTML(html)","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"4"}],"methods":[],"events":[]}
